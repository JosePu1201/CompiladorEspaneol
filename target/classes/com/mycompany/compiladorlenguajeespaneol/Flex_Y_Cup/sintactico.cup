package com.mycompany.compiladorlenguajeespaneol.Flex_Y_Cup;
import java_cup.runtime.*;
import java.util.*;
parser code {:
        ArrayList  <String> salidas = new ArrayList<>();

        public void imprimir(){
                for (String salida : salidas) {
                        System.out.println(salida);
                }
        }
        public String type(String entrada) {
        String salida = "Object";
        switch (entrada) {
            case "Texto":
                salida = "String";
                break;
            case "Entero":
                salida = "int";
                break;
            case "Flotante":
                salida = "float";
                break;

            default:
                break;
        }
        return salida;
    }
    public ArrayList<String> getSalidas() {
        return salidas;
    }

    public void setSalidas(ArrayList<String> salidas) {
        this.salidas = salidas;
    }
        public String crearFor(String priemro,String segundo){
        String salida = "";
        try {
            int uno = Integer.parseInt(priemro);
            int dos = Integer.parseInt(segundo);
            if(uno != dos){
                if(uno < dos){
                    salida = "for(int i = "+uno+"; "+"i"+"<"+dos+"; i++){\n";
                }
                else{
                    salida = "for(int i = "+uno+"; "+"i"+">"+dos+"; i--){\n";
                }
            }
        } catch (Exception e) {
        }
        System.out.println(salida);
        return salida;
    }

:};
//   
terminal ESCRIBIR,LEER,ENTERO,FLOTANTE,STRING,PARENTESISABIERTO,PARENTESISCERRADO,DOSPUNTOS,COMA,MULTIPLICAR,MENOS,DIAGONAL,POTENCIA,MAS;
terminal NUMERO,DECIMAL,ID,COMILLASTEXTO,PUNTOYCOMA,COMILLAS,SI,SINO,PARA,MAYOR,MENOR,IGUAL,IGUALDOBLE,MAYORIGUAL,MENORIGUAL,FINSI,FINPARA;
 
non terminal inicio, op,declaracion,declaracionigual,tipo,escribir,condicion,numero,si,resultado,sino,sinosi,for,ciclo;

inicio  ::= ciclo:b {:salidas.add(b.toString());
                imprimir();:}
        ;

/*op:b inicio{:salidas.add(b.toString());
                imprimir();:}
        | op:b {:salidas.add(b.toString());
                imprimir();:}
        ;*/
ciclo   ::= ciclo op:b {:RESULT = b.toString();:}
        | op:b {:RESULT = b.toString();:}
        ;

/*                      Condiciones
---------------------------------------------------------------------*/
condicion       ::=     MAYOR:a {:RESULT = a;:}
                |       MENOR:a  {:RESULT = a;:}
                |       IGUALDOBLE:a {:RESULT = a;:}
                |       MAYORIGUAL:a {:RESULT = a;:}
                |       MENORIGUAL:a  {:RESULT = a;:}
                ;
numero  ::=     NUMERO:a {:RESULT = a;:}
        |       FLOTANTE:a {:RESULT = a;:}
        ;

resultado       ::=     numero:a condicion:b numero:c {:RESULT = a.toString()+b.toString()+c.toString();:}
                |       ID condicion numero
                |       numero condicion ID
                |       ID condicion ID
                ;
/*                      If
--------------------------------------------------------------------*/

si      ::=     SI PARENTESISABIERTO resultado:a PARENTESISCERRADO op:b FINSI{:RESULT = "if ("+a.toString()+"){\n"+b.toString()+"\n}";:}
        ;

op  ::= declaracion:a {:RESULT = a;:}
    |   escribir:a {:RESULT = a;:}
    |   si:a {:RESULT = a;:}
    |   sinosi:a {:RESULT = a;:}
    |   for:a {:RESULT = a;:}
    ;
/*                      else
--------------------------------------------------------------------*/
sino    ::= SINO op:a FINSI{:RESULT = "else {\n"+a.toString()+"\n}";:}
        ;
/*                      elseif
---------------------------------------------------------------------*/
sinosi  ::= si:a sino:b {:RESULT = a.toString()+b.toString();:}
        ;
/*                      Delaraciones
--------------------------------------------------------------------*/
declaracion ::= tipo:a ID:b PUNTOYCOMA {:RESULT = a.toString()+" "+b.toString()+";";:}
; 

tipo    ::= ENTERO:a  {:RESULT = type(a.toString());:}
        |   FLOTANTE:a    {:RESULT = type(a.toString());:}
        |   STRING:a      {:RESULT = type(a.toString());:}
        ;
/*                      Escribir
---------------------------------------------------------------------*/
escribir    ::= ESCRIBIR PARENTESISABIERTO COMILLAS ID:a COMILLAS PARENTESISCERRADO PUNTOYCOMA{:RESULT = "System.out.println("+"\""+a.toString()+"\""+");";:}
            ;
/*                      For
----------------------------------------------------------------------*/
for     ::=     PARA PARENTESISABIERTO NUMERO:num1 COMA NUMERO:num2 PARENTESISCERRADO op:a FINPARA {:RESULT = crearFor(num1.toString(),num2.toString())+a.toString()+"\n}";:}
        ;



/*
//NUMERO
a ::=   a:n1 MAS b:n2 {:RESULT = (double)n1 +(double) n2;  :}
        | a:n1 MENOS b:n2 {: RESULT = (double)n1 - (double)n2; :}
        | b:n1 {: RESULT = n1; :}
        ;

b ::=   b:n1 MULTIPLICAR c:n2 {: RESULT = (double)n1 * (double)n2; :}
        | b:n1 DIAGONAL c:n2 {: 
        if(castEntero(n2) == 0 ){
                Errores e = new Errores(n2.toString(), "Semantico", "No se puede dividir entre 0", n2left, n2right);
                mundoTemp.getErrores().add(e);
                RESULT = 0D; 
        }
        else{RESULT = (double)n1/(double)n2;}:}
        | MENOS c:n1 {: RESULT = -1 *(double) n1; :}
        | c:n1 {: RESULT = (double)n1; :}
        ;

c ::=   d:n1 POTENCIA c:n2 {: :}
        | d:n1 POTENCIA MENOS c:n2 {: :}
        | RAIZ PARENTESISABIERTO a:n1 PARENTESISCERRADO {::}
        | d:n1 {: RESULT = (double)n1; :}
        ;

d ::=   NUMERO:n1 {: RESULT = Double.valueOf(n1.toString());:}
        | DECIMAL:n1 {:RESULT = Double.valueOf(n1.toString());:}
        | tipoCeil:n1 {:RESULT = Double.valueOf(n1.toString());:}      
        | PARENTESISABIERTO a:n1 PARENTESISCERRADO {: RESULT = (double)n1; :}
        ;
 tipoCeil       ::= FLOOR PARENTESISABIERTO a:num PARENTESISCERRADO {:		
                double a = Math.floor(casteoNumero(num));                        
                RESULT = (double)a;:}  
                |  CEIL PARENTESISABIERTO a:num PARENTESISCERRADO   {:
                double a = Math.ceil(casteoNumero(num));                        
                RESULT = (double)a;:}
                ;
*/