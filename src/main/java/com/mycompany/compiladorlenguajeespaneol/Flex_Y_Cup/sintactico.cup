package com.mycompany.compiladorlenguajeespaneol.Flex_Y_Cup;
import java_cup.runtime.*;
import java.util.*;
parser code {:


:};
//   
terminal ESCRIBIR,LEER,ENTERO,FLOTANTE,STRING,PARENTESISABIERTO,PARENTESISCERRADO,COMILLAS,DOSPUNTOS,COMA,MULTIPLICAR,MENOS,DIAGONAL,POTENCIA,MAS;
terminal NUMERO,DECIMAL,ID,COMILLASTEXTO,PUNTOYCOMA;
 
non terminal inicio, op,declaracion,declaracionigual,tipo,escribir;

inicio  ::= op;

/*                      Opciones
--------------------------------------------------------------------*/
op  ::= declaracion
    |   escribir
    ;

/*                      Delaraciones
--------------------------------------------------------------------*/
declaracion ::= tipo ID PUNTOYCOMA;

tipo    ::= ENTERO:a  {:System.out.println(a.toString());:}
        |   FLOTANTE
        |   STRING
        ;
/*                      Escribir
---------------------------------------------------------------------*/
escribir    ::= ESCRIBIR PARENTESISABIERTO COMILLASTEXTO:a PARENTESISCERRADO PUNTOYCOMA{:System.out.println(a.toString());:}
            ;
/*
//NUMERO
a ::=   a:n1 MAS b:n2 {:RESULT = (double)n1 +(double) n2;  :}
        | a:n1 MENOS b:n2 {: RESULT = (double)n1 - (double)n2; :}
        | b:n1 {: RESULT = n1; :}
        ;

b ::=   b:n1 MULTIPLICAR c:n2 {: RESULT = (double)n1 * (double)n2; :}
        | b:n1 DIAGONAL c:n2 {: 
        if(castEntero(n2) == 0 ){
                Errores e = new Errores(n2.toString(), "Semantico", "No se puede dividir entre 0", n2left, n2right);
                mundoTemp.getErrores().add(e);
                RESULT = 0D; 
        }
        else{RESULT = (double)n1/(double)n2;}:}
        | MENOS c:n1 {: RESULT = -1 *(double) n1; :}
        | c:n1 {: RESULT = (double)n1; :}
        ;

c ::=   d:n1 POTENCIA c:n2 {: :}
        | d:n1 POTENCIA MENOS c:n2 {: :}
        | RAIZ PARENTESISABIERTO a:n1 PARENTESISCERRADO {::}
        | d:n1 {: RESULT = (double)n1; :}
        ;

d ::=   NUMERO:n1 {: RESULT = Double.valueOf(n1.toString());:}
        | DECIMAL:n1 {:RESULT = Double.valueOf(n1.toString());:}
        | tipoCeil:n1 {:RESULT = Double.valueOf(n1.toString());:}      
        | PARENTESISABIERTO a:n1 PARENTESISCERRADO {: RESULT = (double)n1; :}
        ;
 tipoCeil       ::= FLOOR PARENTESISABIERTO a:num PARENTESISCERRADO {:		
                double a = Math.floor(casteoNumero(num));                        
                RESULT = (double)a;:}  
                |  CEIL PARENTESISABIERTO a:num PARENTESISCERRADO   {:
                double a = Math.ceil(casteoNumero(num));                        
                RESULT = (double)a;:}
                ;
*/