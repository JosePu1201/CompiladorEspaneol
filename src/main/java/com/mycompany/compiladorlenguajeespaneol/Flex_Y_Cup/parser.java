
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package com.mycompany.compiladorlenguajeespaneol.Flex_Y_Cup;

import java_cup.runtime.*;
import com.mycompany.compiladorlenguajeespaneol.Logica.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\120\000\002\002\003\000\002\002\004\000\002\002" +
    "\002\000\002\042\004\000\002\042\003\000\002\040\004" +
    "\000\002\040\003\000\002\041\003\000\002\041\003\000" +
    "\002\017\004\000\002\017\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\043\010\000" +
    "\002\044\005\000\002\044\003\000\002\044\002\000\002" +
    "\045\010\000\002\010\003\000\002\010\003\000\002\010" +
    "\004\000\002\010\004\000\002\010\004\000\002\011\003" +
    "\000\002\011\003\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\012\011\000\002" +
    "\014\006\000\002\015\004\000\002\004\005\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\007\011" +
    "\000\002\007\007\000\002\016\013\000\002\023\005\000" +
    "\002\024\004\000\002\022\007\000\002\022\005\000\002" +
    "\022\005\000\002\022\004\000\002\022\007\000\002\022" +
    "\007\000\002\022\007\000\002\022\006\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\025\007\000\002\027\011\000\002\026" +
    "\010\000\002\026\007\000\002\030\005\000\002\030\003" +
    "\000\002\030\003\000\002\031\011\000\002\033\006\000" +
    "\002\035\006\000\002\035\004\000\002\035\002\000\002" +
    "\034\012\000\002\036\016\000\002\037\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\012\002\uffff\053\015\054\007\055\010\001" +
    "\002\000\010\053\ufff9\054\ufff9\055\ufff9\001\002\000\010" +
    "\053\ufffa\054\ufffa\055\ufffa\001\002\000\004\002\001\001" +
    "\002\000\010\006\024\007\023\010\020\001\002\000\004" +
    "\052\256\001\002\000\010\053\015\054\007\055\010\001" +
    "\002\000\004\002\ufffd\001\002\000\004\002\253\001\002" +
    "\000\010\053\ufffb\054\ufffb\055\ufffb\001\002\000\004\024" +
    "\016\001\002\000\004\011\017\001\002\000\014\006\024" +
    "\007\023\010\020\012\uffb5\014\uffb5\001\002\000\004\024" +
    "\uffd6\001\002\000\004\024\252\001\002\000\006\012\026" +
    "\014\025\001\002\000\004\024\uffd7\001\002\000\004\024" +
    "\uffd8\001\002\000\010\006\024\007\023\010\020\001\002" +
    "\000\004\052\027\001\002\000\030\004\047\005\033\006" +
    "\024\007\023\010\020\024\037\030\046\032\035\046\052" +
    "\050\054\053\036\001\002\000\014\022\065\023\071\024" +
    "\236\027\241\054\212\001\002\000\004\024\204\001\002" +
    "\000\036\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\024" +
    "\ufff0\030\ufff0\032\ufff0\044\ufff0\046\ufff0\050\ufff0\051\ufff0" +
    "\053\ufff0\056\ufff0\001\002\000\004\011\200\001\002\000" +
    "\036\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee\024\uffee" +
    "\030\uffee\032\uffee\044\uffee\046\uffee\050\uffee\051\uffee\053" +
    "\uffee\056\uffee\001\002\000\004\011\170\001\002\000\004" +
    "\024\160\001\002\000\004\035\157\001\002\000\036\004" +
    "\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\024\ufff7\030\ufff7" +
    "\032\ufff7\044\ufff7\046\ufff7\050\ufff7\051\ufff7\053\ufff7\056" +
    "\ufff7\001\002\000\036\004\ufff6\005\ufff6\006\ufff6\007\ufff6" +
    "\010\ufff6\024\ufff6\030\ufff6\032\ufff6\044\ufff6\046\ufff6\050" +
    "\ufff6\051\ufff6\053\ufff6\056\ufff6\001\002\000\036\004\ufff3" +
    "\005\ufff3\006\ufff3\007\ufff3\010\ufff3\024\ufff3\030\ufff3\032" +
    "\ufff3\044\ufff3\046\ufff3\050\ufff3\051\ufff3\053\ufff3\056\ufff3" +
    "\001\002\000\036\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010" +
    "\ufff1\024\ufff1\030\ufff1\032\ufff1\044\ufff1\046\ufff1\050\ufff1" +
    "\051\ufff1\053\ufff1\056\ufff1\001\002\000\036\004\ufff5\005" +
    "\ufff5\006\ufff5\007\ufff5\010\ufff5\024\ufff5\030\ufff5\032\ufff5" +
    "\044\ufff5\046\ufff5\050\ufff5\051\ufff5\053\ufff5\056\ufff5\001" +
    "\002\000\036\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed" +
    "\024\uffed\030\uffed\032\uffed\044\uffed\046\uffed\050\uffed\051" +
    "\uffed\053\uffed\056\uffed\001\002\000\004\011\151\001\002" +
    "\000\004\011\140\001\002\000\036\004\uffef\005\uffef\006" +
    "\uffef\007\uffef\010\uffef\024\uffef\030\uffef\032\uffef\044\uffef" +
    "\046\uffef\050\uffef\051\uffef\053\uffef\056\uffef\001\002\000" +
    "\036\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\024\ufff2" +
    "\030\ufff2\032\ufff2\044\ufff2\046\ufff2\050\ufff2\051\ufff2\053" +
    "\ufff2\056\ufff2\001\002\000\004\011\113\001\002\000\032" +
    "\004\047\005\033\006\024\007\023\010\020\024\037\030" +
    "\046\032\035\046\052\050\054\051\112\053\036\001\002" +
    "\000\004\011\064\001\002\000\040\004\ufff4\005\ufff4\006" +
    "\ufff4\007\ufff4\010\ufff4\024\ufff4\030\ufff4\031\057\032\ufff4" +
    "\044\ufff4\046\ufff4\050\ufff4\051\ufff4\053\ufff4\056\ufff4\001" +
    "\002\000\036\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda" +
    "\024\uffda\030\uffda\032\uffda\044\uffda\046\uffda\050\uffda\051" +
    "\uffda\053\uffda\056\uffda\001\002\000\004\052\060\001\002" +
    "\000\030\004\047\005\033\006\024\007\023\010\020\024" +
    "\037\030\046\032\035\046\052\050\054\053\036\001\002" +
    "\000\032\004\047\005\033\006\024\007\023\010\020\024" +
    "\037\030\046\032\035\046\052\050\054\051\062\053\036" +
    "\001\002\000\036\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010" +
    "\uffdb\024\uffdb\030\uffdb\032\uffdb\044\uffdb\046\uffdb\050\uffdb" +
    "\051\uffdb\053\uffdb\056\uffdb\001\002\000\036\004\ufff8\005" +
    "\ufff8\006\ufff8\007\ufff8\010\ufff8\024\ufff8\030\ufff8\032\ufff8" +
    "\044\ufff8\046\ufff8\050\ufff8\051\ufff8\053\ufff8\056\ufff8\001" +
    "\002\000\010\022\065\023\071\024\066\001\002\000\026" +
    "\012\uffe2\013\uffe2\015\uffe2\016\uffe2\017\uffe2\021\uffe2\026" +
    "\uffe2\033\uffe2\034\uffe2\035\uffe2\001\002\000\010\033\101" +
    "\034\100\035\076\001\002\000\010\033\101\034\100\035" +
    "\076\001\002\000\004\012\072\001\002\000\026\012\uffe1" +
    "\013\uffe1\015\uffe1\016\uffe1\017\uffe1\021\uffe1\026\uffe1\033" +
    "\uffe1\034\uffe1\035\uffe1\001\002\000\004\052\073\001\002" +
    "\000\030\004\047\005\033\006\024\007\023\010\020\024" +
    "\037\030\046\032\035\046\052\050\054\053\036\001\002" +
    "\000\032\004\047\005\033\006\024\007\023\010\020\024" +
    "\037\030\046\032\035\046\052\050\054\051\075\053\036" +
    "\001\002\000\036\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010" +
    "\uffb9\024\uffb9\030\uffb9\032\uffb9\044\uffb9\046\uffb9\050\uffb9" +
    "\051\uffb9\053\uffb9\056\uffb9\001\002\000\004\035\106\001" +
    "\002\000\010\022\065\023\071\024\104\001\002\000\012" +
    "\022\uffe6\023\uffe6\024\uffe6\035\103\001\002\000\012\022" +
    "\uffe7\023\uffe7\024\uffe7\035\102\001\002\000\010\022\uffe4" +
    "\023\uffe4\024\uffe4\001\002\000\010\022\uffe3\023\uffe3\024" +
    "\uffe3\001\002\000\004\012\uffde\001\002\000\004\012\uffe0" +
    "\001\002\000\010\022\uffe5\023\uffe5\024\uffe5\001\002\000" +
    "\010\022\065\023\071\024\110\001\002\000\004\012\uffdd" +
    "\001\002\000\004\012\uffdf\001\002\000\010\053\uffb4\054" +
    "\uffb4\055\uffb4\001\002\000\004\024\114\001\002\000\004" +
    "\012\115\001\002\000\004\052\116\001\002\000\004\045" +
    "\120\001\002\000\006\045\133\051\132\001\002\000\012" +
    "\022\065\023\071\024\121\027\124\001\002\000\004\013" +
    "\uffba\001\002\000\004\013\uffbb\001\002\000\004\013\127" +
    "\001\002\000\004\024\125\001\002\000\004\027\126\001" +
    "\002\000\004\013\uffbc\001\002\000\030\004\047\005\033" +
    "\006\024\007\023\010\020\024\037\030\046\032\035\046" +
    "\052\050\054\053\036\001\002\000\032\004\047\005\033" +
    "\006\024\007\023\010\020\024\037\030\046\032\035\044" +
    "\131\046\052\050\054\053\036\001\002\000\006\045\uffbd" +
    "\051\uffbd\001\002\000\036\004\uffbf\005\uffbf\006\uffbf\007" +
    "\uffbf\010\uffbf\024\uffbf\030\uffbf\032\uffbf\044\uffbf\046\uffbf" +
    "\050\uffbf\051\uffbf\053\uffbf\056\uffbf\001\002\000\012\022" +
    "\065\023\071\024\121\027\124\001\002\000\004\013\135" +
    "\001\002\000\030\004\047\005\033\006\024\007\023\010" +
    "\020\024\037\030\046\032\035\046\052\050\054\053\036" +
    "\001\002\000\032\004\047\005\033\006\024\007\023\010" +
    "\020\024\037\030\046\032\035\044\137\046\052\050\054" +
    "\053\036\001\002\000\006\045\uffbe\051\uffbe\001\002\000" +
    "\006\024\141\027\142\001\002\000\004\012\147\001\002" +
    "\000\004\024\143\001\002\000\004\027\144\001\002\000" +
    "\004\012\145\001\002\000\004\026\146\001\002\000\036" +
    "\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\024\uffd5\030" +
    "\uffd5\032\uffd5\044\uffd5\046\uffd5\050\uffd5\051\uffd5\053\uffd5" +
    "\056\uffd5\001\002\000\004\026\150\001\002\000\036\004" +
    "\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\024\uffd4\030\uffd4" +
    "\032\uffd4\044\uffd4\046\uffd4\050\uffd4\051\uffd4\053\uffd4\056" +
    "\uffd4\001\002\000\010\022\065\023\071\024\066\001\002" +
    "\000\004\012\153\001\002\000\004\052\154\001\002\000" +
    "\030\004\047\005\033\006\024\007\023\010\020\024\037" +
    "\030\046\032\035\046\052\050\054\053\036\001\002\000" +
    "\032\004\047\005\033\006\024\007\023\010\020\024\037" +
    "\030\046\032\035\046\052\050\054\051\156\053\036\001" +
    "\002\000\040\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc" +
    "\024\uffdc\030\uffdc\031\uffdc\032\uffdc\044\uffdc\046\uffdc\050" +
    "\uffdc\051\uffdc\053\uffdc\056\uffdc\001\002\000\014\022\uffd1" +
    "\023\uffd1\024\uffd1\027\uffd1\054\uffd1\001\002\000\004\011" +
    "\161\001\002\000\010\012\uffe9\014\uffe9\024\162\001\002" +
    "\000\006\012\uffea\014\uffea\001\002\000\006\012\165\014" +
    "\164\001\002\000\004\024\167\001\002\000\004\026\166" +
    "\001\002\000\036\004\uffec\005\uffec\006\uffec\007\uffec\010" +
    "\uffec\024\uffec\030\uffec\032\uffec\044\uffec\046\uffec\050\uffec" +
    "\051\uffec\053\uffec\056\uffec\001\002\000\006\012\uffeb\014" +
    "\uffeb\001\002\000\004\022\171\001\002\000\004\014\172" +
    "\001\002\000\004\022\173\001\002\000\004\012\174\001" +
    "\002\000\004\052\175\001\002\000\030\004\047\005\033" +
    "\006\024\007\023\010\020\024\037\030\046\032\035\046" +
    "\052\050\054\053\036\001\002\000\032\004\047\005\033" +
    "\006\024\007\023\010\020\024\037\030\046\032\035\046" +
    "\052\050\054\051\177\053\036\001\002\000\036\004\uffd3" +
    "\005\uffd3\006\uffd3\007\uffd3\010\uffd3\024\uffd3\030\uffd3\032" +
    "\uffd3\044\uffd3\046\uffd3\050\uffd3\051\uffd3\053\uffd3\056\uffd3" +
    "\001\002\000\004\024\201\001\002\000\004\012\202\001" +
    "\002\000\004\026\203\001\002\000\036\004\uffc0\005\uffc0" +
    "\006\uffc0\007\uffc0\010\uffc0\024\uffc0\030\uffc0\032\uffc0\044" +
    "\uffc0\046\uffc0\050\uffc0\051\uffc0\053\uffc0\056\uffc0\001\002" +
    "\000\006\026\205\035\206\001\002\000\036\004\uffd9\005" +
    "\uffd9\006\uffd9\007\uffd9\010\uffd9\024\uffd9\030\uffd9\032\uffd9" +
    "\044\uffd9\046\uffd9\050\uffd9\051\uffd9\053\uffd9\056\uffd9\001" +
    "\002\000\012\022\065\023\071\024\207\054\212\001\002" +
    "\000\014\015\222\016\226\017\225\021\224\026\232\001" +
    "\002\000\014\015\222\016\226\017\225\021\224\026\223" +
    "\001\002\000\036\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010" +
    "\uffc9\024\uffc9\030\uffc9\032\uffc9\044\uffc9\046\uffc9\050\uffc9" +
    "\051\uffc9\053\uffc9\056\uffc9\001\002\000\004\024\215\001" +
    "\002\000\004\026\214\001\002\000\036\004\uffcb\005\uffcb" +
    "\006\uffcb\007\uffcb\010\uffcb\024\uffcb\030\uffcb\032\uffcb\044" +
    "\uffcb\046\uffcb\050\uffcb\051\uffcb\053\uffcb\056\uffcb\001\002" +
    "\000\004\011\216\001\002\000\010\012\uffe9\014\uffe9\024" +
    "\162\001\002\000\006\012\220\014\164\001\002\000\004" +
    "\026\221\001\002\000\036\004\uffe8\005\uffe8\006\uffe8\007" +
    "\uffe8\010\uffe8\024\uffe8\030\uffe8\032\uffe8\044\uffe8\046\uffe8" +
    "\050\uffe8\051\uffe8\053\uffe8\056\uffe8\001\002\000\010\022" +
    "\uffc6\023\uffc6\024\uffc6\001\002\000\036\004\uffcc\005\uffcc" +
    "\006\uffcc\007\uffcc\010\uffcc\024\uffcc\030\uffcc\032\uffcc\044" +
    "\uffcc\046\uffcc\050\uffcc\051\uffcc\053\uffcc\056\uffcc\001\002" +
    "\000\010\022\uffc8\023\uffc8\024\uffc8\001\002\000\010\022" +
    "\uffc5\023\uffc5\024\uffc5\001\002\000\010\022\uffc7\023\uffc7" +
    "\024\uffc7\001\002\000\010\022\065\023\071\024\230\001" +
    "\002\000\004\026\uffc2\001\002\000\004\026\uffc4\001\002" +
    "\000\036\004\uffca\005\uffca\006\uffca\007\uffca\010\uffca\024" +
    "\uffca\030\uffca\032\uffca\044\uffca\046\uffca\050\uffca\051\uffca" +
    "\053\uffca\056\uffca\001\002\000\010\022\065\023\071\024" +
    "\234\001\002\000\004\026\uffc1\001\002\000\004\026\uffc3" +
    "\001\002\000\012\015\222\016\226\017\225\021\224\001" +
    "\002\000\014\015\222\016\226\017\225\021\224\026\247" +
    "\001\002\000\036\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010" +
    "\uffcd\024\uffcd\030\uffcd\032\uffcd\044\uffcd\046\uffcd\050\uffcd" +
    "\051\uffcd\053\uffcd\056\uffcd\001\002\000\004\024\244\001" +
    "\002\000\004\026\243\001\002\000\036\004\uffce\005\uffce" +
    "\006\uffce\007\uffce\010\uffce\024\uffce\030\uffce\032\uffce\044" +
    "\uffce\046\uffce\050\uffce\051\uffce\053\uffce\056\uffce\001\002" +
    "\000\004\027\245\001\002\000\004\026\246\001\002\000" +
    "\036\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\024\uffd0" +
    "\030\uffd0\032\uffd0\044\uffd0\046\uffd0\050\uffd0\051\uffd0\053" +
    "\uffd0\056\uffd0\001\002\000\036\004\uffcf\005\uffcf\006\uffcf" +
    "\007\uffcf\010\uffcf\024\uffcf\030\uffcf\032\uffcf\044\uffcf\046" +
    "\uffcf\050\uffcf\051\uffcf\053\uffcf\056\uffcf\001\002\000\004" +
    "\024\251\001\002\000\006\012\uffb7\014\uffb7\001\002\000" +
    "\006\012\uffb6\014\uffb6\001\002\000\004\002\000\001\002" +
    "\000\004\002\ufffe\001\002\000\010\053\ufffc\054\ufffc\055" +
    "\ufffc\001\002\000\030\004\047\005\033\006\024\007\023" +
    "\010\020\024\037\030\046\032\035\046\052\050\054\053" +
    "\036\001\002\000\032\004\047\005\033\006\024\007\023" +
    "\010\020\024\037\030\046\032\035\046\052\050\054\051" +
    "\260\053\036\001\002\000\004\002\uffb8\001\002\000\004" +
    "\024\262\001\002\000\004\011\263\001\002\000\014\006" +
    "\024\007\023\010\020\012\uffb5\014\uffb5\001\002\000\006" +
    "\012\265\014\025\001\002\000\004\052\266\001\002\000" +
    "\030\004\047\005\033\006\024\007\023\010\020\024\037" +
    "\030\046\032\035\046\052\050\054\053\036\001\002\000" +
    "\032\004\047\005\033\006\024\007\023\010\020\024\037" +
    "\030\046\032\035\046\052\050\054\053\036\056\270\001" +
    "\002\000\004\024\271\001\002\000\004\026\272\001\002" +
    "\000\004\051\273\001\002\000\010\053\uffb3\054\uffb3\055" +
    "\uffb3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\020\002\012\033\011\034\003\036\004\040" +
    "\010\041\013\042\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\260\001\001\000" +
    "\002\001\001\000\012\033\253\034\003\036\004\041\254" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\020" +
    "\035\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\247\001\001\000\002\001\001\000\036\003\037\004" +
    "\040\006\030\007\043\012\054\015\041\016\050\017\052" +
    "\022\042\024\027\025\031\027\047\031\033\043\044\001" +
    "\001\000\010\011\236\021\241\045\237\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\003\062\004\040\006\030" +
    "\007\043\012\054\015\041\016\050\022\042\024\027\025" +
    "\031\027\047\031\033\043\044\001\001\000\002\001\001" +
    "\000\004\014\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\003\037\004\040\006\030\007\043\012\054" +
    "\015\041\016\050\017\060\022\042\024\027\025\031\027" +
    "\047\031\033\043\044\001\001\000\034\003\062\004\040" +
    "\006\030\007\043\012\054\015\041\016\050\022\042\024" +
    "\027\025\031\027\047\031\033\043\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\066\013\067\001" +
    "\001\000\002\001\001\000\004\010\106\001\001\000\004" +
    "\010\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\003\037\004\040\006\030\007\043" +
    "\012\054\015\041\016\050\017\073\022\042\024\027\025" +
    "\031\027\047\031\033\043\044\001\001\000\034\003\062" +
    "\004\040\006\030\007\043\012\054\015\041\016\050\022" +
    "\042\024\027\025\031\027\047\031\033\043\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\116\001\001" +
    "\000\002\001\001\000\006\011\121\030\122\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\003" +
    "\037\004\040\006\030\007\043\012\054\015\041\016\050" +
    "\017\127\022\042\024\027\025\031\027\047\031\033\043" +
    "\044\001\001\000\034\003\062\004\040\006\030\007\043" +
    "\012\054\015\041\016\050\022\042\024\027\025\031\027" +
    "\047\031\033\043\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\121\030\133\001\001\000\002\001" +
    "\001\000\036\003\037\004\040\006\030\007\043\012\054" +
    "\015\041\016\050\017\135\022\042\024\027\025\031\027" +
    "\047\031\033\043\044\001\001\000\034\003\062\004\040" +
    "\006\030\007\043\012\054\015\041\016\050\022\042\024" +
    "\027\025\031\027\047\031\033\043\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\066\013\151\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\003\037\004\040\006\030\007\043\012" +
    "\054\015\041\016\050\017\154\022\042\024\027\025\031" +
    "\027\047\031\033\043\044\001\001\000\034\003\062\004" +
    "\040\006\030\007\043\012\054\015\041\016\050\022\042" +
    "\024\027\025\031\027\047\031\033\043\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\044\162\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\037" +
    "\004\040\006\030\007\043\012\054\015\041\016\050\017" +
    "\175\022\042\024\027\025\031\027\047\031\033\043\044" +
    "\001\001\000\034\003\062\004\040\006\030\007\043\012" +
    "\054\015\041\016\050\022\042\024\027\025\031\027\047" +
    "\031\033\043\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\011\207\021" +
    "\212\045\210\001\001\000\004\020\232\001\001\000\004" +
    "\020\226\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\044\216\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\230\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\234\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\232\001\001\000\004\020\226" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\003\037\004\040\006" +
    "\030\007\043\012\054\015\041\016\050\017\256\022\042" +
    "\024\027\025\031\027\047\031\033\043\044\001\001\000" +
    "\034\003\062\004\040\006\030\007\043\012\054\015\041" +
    "\016\050\022\042\024\027\025\031\027\047\031\033\043" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\020\035\263\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\003\037\004\040\006\030" +
    "\007\043\012\054\015\041\016\050\017\266\022\042\024" +
    "\027\025\031\027\047\031\033\043\044\001\001\000\034" +
    "\003\062\004\040\006\030\007\043\012\054\015\041\016" +
    "\050\022\042\024\027\025\031\027\047\031\033\043\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        ArrayList<Variables> vars = new ArrayList<>();
        ArrayList  <String> salidas = new ArrayList<>();
        public ArrayList<ErrorSalida> erroSalida = new ArrayList<>();
        private ArrayList<MetFun> metodosYFunciones = new ArrayList<>();
        private ArrayList<Variables> parTemp = new ArrayList<>();
        private ArrayList<Variables> parTemp1 = new ArrayList<>();
        boolean banderaInt = false;
        boolean banderaFloat = false;
        boolean banderaString = false;
        boolean banderaError = false;
        String temporal = "";

        public  boolean getError(){
            return banderaError;
        }
        public void imprimir(){
                for (String salida : salidas) {
                        System.out.println(salida);
                }
        }

        public void agregarATemp(String id){
            for(Variables var: vars){
                if(var.getNombre().equals(id)){
                    parTemp1.add(var);
                    break;
                }
            }
        }
               public void error(){
                   try {
            throw new Exception("");
     } catch (Exception ex) {
         //Logger.getLogger(parser.class.getName()).log(Level.SEVERE, null, ex);
     }}
 public boolean ValidarParametro(String idFun){
            boolean bandera = true;
            for(MetFun fun : metodosYFunciones){
                if(fun.getNombre().equals(idFun)){
                    if(fun.getVariables().size() == parTemp1.size()){
                        System.out.println("Mismo tamabneo");
                        for (int i = 0; i < fun.getVariables().size(); i++) {
                            
                            if(fun.getVariables().get(i).getTipo().equals(parTemp1.get(i).getTipo())){
                                erroSalida.add(new ErrorSalida(0,0,"Los tipos de variable no coinciden"));
                            error();
                            }
                            else{
                                bandera = false;
                            }
                        }
                    }
                    else{
                        System.out.println("diferente tamabneo");
                        bandera = false;
                    }}}
        return bandera;
        }
public boolean validaFun(String nombre){
    boolean bandera = false;
    for(MetFun s: metodosYFunciones){
        System.out.println(s.getNombre());
        if(s.getNombre().equals(nombre)){
            bandera = true;
            break;
        }
    }
    return bandera;
}
public boolean existeVar(String var,ArrayList <Variables> variables) {
        boolean bandera = false;
        for (Variables vars : variables) {
            if (var.equals(vars.getNombre())) {
                bandera = true;
                break;
            }
        }
        return bandera;
    }
public boolean valTipo(String id,String tipo){
        boolean band = false;
        for(Variables var: vars){
            if(var.getNombre().equals(id)){
                if(var.getTipo().equals("flotante")){
                     if(tipo.equals("Entero")){
                    band = true;
                    break;
                }
                }
                else{
                    
                     if(var.getTipo().equals(tipo)){
                    band = true;
                    break;
                }
               
            }

        }
        

    }
    return band;
    }

    public boolean mismoTipo(String tipo, String id,ArrayList <Variables> vars) {
        boolean si = false;
        for(Variables var1 : vars){
            if(var1.getNombre().equals(id)){
                if(var1.getTipo().equals(tipo)){
                    si = true;
                    break;
                } 
            }
        }
        return si;
    }
        public String type(String entrada) {
        String salida = "Object";
        switch (entrada) {
            case "Texto":
                salida = "String";
                break;
            case "Entero":
                salida = "int";
                break;
            case "flotante":
                salida = "double";
                break;

            default:
                break;
        }
        return salida;
    }
    public ArrayList<String> getSalidas() {
        return salidas;
    }

    public void setSalidas(ArrayList<String> salidas) {
        this.salidas = salidas;
    }
        public String crearFor(String priemro,String segundo){
        String salida = "";
        try {
            int uno = Integer.parseInt(priemro);
            int dos = Integer.parseInt(segundo);
            if(uno != dos){
                if(uno < dos){
                    salida = "for(int i = "+uno+"; "+"i"+"<"+dos+"; i++){\n";
                }
                else{
                    salida = "for(int i = "+uno+"; "+"i"+">"+dos+"; i--){\n";
                }
            }
        } catch (Exception e) {
        }
        System.out.println(salida);
        return salida;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= todo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		salidas.add(a.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // todo ::= eleccion main 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = b.toString()+"\n"+a.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("todo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // todo ::= main 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("todo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // eleccion ::= eleccion tipoFP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a.toString()+"\n"+b.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("eleccion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // eleccion ::= tipoFP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a.toString()+"\n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("eleccion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tipoFP ::= funcion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoFP",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipoFP ::= proseso 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoFP",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ciclo ::= ciclo op 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a.toString()+"\n"+b.toString();/*if(b.toString() != ""){
                                salidas.add(b.toString());}*/
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ciclo ::= op 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = b.toString()+"\n";/*if(b.toString() != ""){
                                salidas.add(b.toString());}*/
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // op ::= declaracion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // op ::= escribir 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // op ::= si 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // op ::= sinosi 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // op ::= for 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // op ::= asig 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // op ::= lect 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // op ::= cambio 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // op ::= Mientras 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // op ::= llamaPros 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // llamaPros ::= PROS ID PARENTESISABIERTO parametros PARENTESISCERRADO PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		if(ValidarParametro(a.toString()) && validaFun(a.toString())){
                                                                                            RESULT = a.toString()+" ("+b.toString()+");";
                                                                                        }else{
                                                                                            banderaError = true;
                                                                                            erroSalida.add(new ErrorSalida(bleft,bright,"Ocurrio un error con: "+a.toString()+""));
                                                                                            error();
                                                                                        }
                                                                                        parTemp1.clear();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamaPros",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // parametros ::= parametros COMA ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(existeVar(b.toString(),vars)){
                                            RESULT = a.toString()+","+b.toString();
                                            agregarATemp(b.toString());
                                        }else{
                                            RESULT = "";
                                            banderaError = true;
                                            erroSalida.add(new ErrorSalida(bleft,bright,"La variable: "+b.toString()+" no existe"));
                                            error();
                                        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // parametros ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(existeVar(a.toString(),vars)){
                            RESULT = a.toString();
                            agregarATemp(a.toString());
                        }else{
                            RESULT = "";
                            banderaError = true;
                            erroSalida.add(new ErrorSalida(aleft,aright,"La variable: "+a.toString()+" no existe"));
                            error();
                        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // parametros ::= 
            {
              Object RESULT =null;
		RESULT = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // llamarFun ::= FUN ID PARENTESISABIERTO parametros PARENTESISCERRADO PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		if(ValidarParametro(a.toString()) && validaFun(a.toString())){
                                                                                            RESULT = a.toString()+" ("+b.toString()+");";
                                                                                        }else{
                                                                                            banderaError = true;
                                                                                            erroSalida.add(new ErrorSalida(bleft,bright,"Ocurrio un error con: "+a.toString()+""));
                                                                                            error();
                                                                                        }
                                                                                        parTemp1.clear();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamarFun",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // condicion ::= MAYOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // condicion ::= MENOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // condicion ::= IGUAL IGUAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = "==";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // condicion ::= MAYOR IGUAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ">=";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // condicion ::= MENOR IGUAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "<=";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // numero ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numero",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // numero ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numero",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // resultado ::= numero condicion numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a.toString()+b.toString()+c.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("resultado",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // resultado ::= ID condicion numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    if(existeVar(a.toString(),vars)){
                                                                RESULT = a.toString()+b.toString()+c.toString();}
                                                            else{
                                                                RESULT = "";
                                                                banderaError = true;
                                                                erroSalida.add(new ErrorSalida(aleft,aright,"La variable: "+a.toString()+" no existe"));
                                                                error();
                                                            }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("resultado",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // resultado ::= numero condicion ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    if(existeVar(c.toString(),vars)){
                                                                RESULT = a.toString()+b.toString()+c.toString();}
                                                            else{
                                                                RESULT = "";
                                                                banderaError = true;
                                                                erroSalida.add(new ErrorSalida(cleft,cright,"La variable: "+c.toString()+" no existe"));
                                                                error();
                                                            }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("resultado",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // resultado ::= ID condicion ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    if(existeVar(a.toString(),vars) && existeVar(c.toString(),vars)){
                                                                RESULT = a.toString()+b.toString()+c.toString();}
                                                            else{
                                                                RESULT = "";
                                                                banderaError = true;
                                                                erroSalida.add(new ErrorSalida(aleft,aright,"Una de las variables no existe "));
                                                                error();
                                                            }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("resultado",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // si ::= SI PARENTESISABIERTO resultado PARENTESISCERRADO LLAVEA ciclo LLAVEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = "if ("+a.toString()+"){\n"+b.toString()+"\n}";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("si",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sino ::= SINO LLAVEA ciclo LLAVEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = "else {\n"+a.toString()+"\n}";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sino",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sinosi ::= si sino 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a.toString()+b.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sinosi",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declaracion ::= tipo ID PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		       
                                                if(existeVar(b.toString(),vars)){
                                                        banderaError = true;
                                                        RESULT = "";
                                                        erroSalida.add(new ErrorSalida(bleft,bright,"La variable: "+b.toString()+" ya existe"));
                                                        error();
                                                }
                                                else{
                                                vars.add(new Variables(b.toString(),a.toString()));
                                                RESULT = a.toString()+" "+b.toString()+";";}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tipo ::= ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = type(a.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tipo ::= FLOTANTE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = type(a.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // tipo ::= STRING 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = type(a.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // escribir ::= ESCRIBIR PARENTESISABIERTO COMILLAS ID COMILLAS PARENTESISCERRADO PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = "System.out.println("+"\""+a.toString()+"\""+");";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribir",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // escribir ::= ESCRIBIR PARENTESISABIERTO ID PARENTESISCERRADO PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		    if(existeVar(a.toString(),vars)){
                                                                                        RESULT = "System.out.println("+a.toString()+");";
                                                                                    }else{
                                                                                        RESULT = "";
                                                                                        banderaError = true;
                                                                                        erroSalida.add(new ErrorSalida(aleft,aright,"La variable: "+a.toString()+" no existe"));
                                                                                        error();
                                                                                    }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribir",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // for ::= PARA PARENTESISABIERTO NUMERO COMA NUMERO PARENTESISCERRADO LLAVEA ciclo LLAVEC 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = crearFor(num1.toString(),num2.toString())+a.toString()+"\n}";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // asig1 ::= tipo ID IGUAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(existeVar(b.toString(),vars)){
                                                        banderaError = true;
                                                        RESULT = "";
                                                        erroSalida.add(new ErrorSalida(bleft,bright,"La variable: "+b.toString()+" ya existe"));
                                                        error();
                                                }
                                                else{
                                                vars.add(new Variables(b.toString(),a.toString()));
                                                RESULT = a.toString()+" "+b.toString()+"";}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // asig2 ::= ID IGUAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // asig ::= asig2 COMILLAS ID COMILLAS PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		    if(existeVar(a.toString(),vars)){
                                                                    RESULT = a.toString()+" = "+"\""+b.toString()+"\""+";\n";}
                                                                else{
                                                                    RESULT = "";
                                                                    banderaError = true;
                                                                    erroSalida.add(new ErrorSalida(bleft,bright,"La variable: "+b.toString()+" no existe"));
                                                                    error();
                                                                }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // asig ::= asig2 numero PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  if(existeVar(a.toString(),vars)){
                                                    RESULT = a.toString()+" = "+b.toString()+";\n";
                                                }else{
                                                    RESULT = "";
                                                    banderaError = true;
                                                    erroSalida.add(new ErrorSalida(aleft,aright,"La variable: "+a.toString()+" no existe"));
                                                    error();
                                                } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // asig ::= asig2 operacion PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   if(existeVar(a.toString(),vars)){
                                                        RESULT = a.toString()+" = "+b.toString()+";\n";
                                                    }else{
                                                        RESULT = "";
                                                        banderaError = true;
                                                        erroSalida.add(new ErrorSalida(aleft,aright,"La variable: "+a.toString()+" no existe"));
                                                    } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // asig ::= asig2 llamarFun 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(existeVar(a.toString(),vars)){
                                            RESULT = a.toString()+" = "+b.toString()+";\n";
                                        }else{
                                            RESULT = "";
                                            banderaError = true;
                                            erroSalida.add(new ErrorSalida(aleft,aright,"La variable: "+a.toString()+" no existe"));
                                            error();
                                        } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // asig ::= tipo ID IGUAL numero PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    if(existeVar(b.toString(),vars)){
                                                                banderaError  = true;
                                                                RESULT = "";
                                                                erroSalida.add(new ErrorSalida(bleft,bright,"La variable: "+b.toString()+" ya existe"));
                                                                error();
                                                            }else{
                                                                if(a.toString().equals("int") || a.toString().equals("double")){
                                                                    RESULT = a.toString()+" "+b.toString()+" = "+c.toString()+";\n";
                                                                    vars.add(new Variables(b.toString(),a.toString())); 
                                                                }
                                                                else{
                                                                    banderaError = true;
                                                                    RESULT = "";
                                                                    erroSalida.add(new ErrorSalida(aleft,aright,"Los tipos son diferentes"));
                                                                    error();
                                                                    }
                                                            }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // asig ::= tipo ID IGUAL operacion PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    if(existeVar(b.toString(),vars)){
                                                                banderaError  = true;
                                                                RESULT = "";
                                                                erroSalida.add(new ErrorSalida(bleft,bright,"La variable: "+b.toString()+" ya existe"));
                                                                error();
                                                            }else{
                                                                if(a.toString().equals("int") || a.toString().equals("double")){
                                                                    RESULT = a.toString()+" "+b.toString()+" = "+c.toString()+";\n"; 
                                                                    vars.add(new Variables(b.toString(),a.toString()));
                                                                }
                                                                else{
                                                                    banderaError = true;
                                                                    RESULT = "";
                                                                    erroSalida.add(new ErrorSalida(bleft,bright,"los tipos son diferentes"));
                                                                    error();
                                                                    }
                                                            }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // asig ::= tipo ID IGUAL ID PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    if(existeVar(b.toString(),vars)){
                                                                banderaError  = true;
                                                                RESULT = "";
                                                                erroSalida.add(new ErrorSalida(bleft,bright,"La variable: "+b.toString()+" ya existe"));
                                                                error();
                                                            }else{
                                                                if(a.toString().equals("String")){
                                                                    RESULT = a.toString()+" "+b.toString()+" = "+c.toString()+";\n";
                                                                    vars.add(new Variables(b.toString(),a.toString())); 
                                                                    
                                                                }
                                                                else{
                                                                    banderaError = true;
                                                                    RESULT = "";
                                                                    erroSalida.add(new ErrorSalida(bleft,bright,"Los tipos no son adecuados"));
                                                                    error();
                                                                    }
                                                            }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // asig ::= tipo ID IGUAL llamarFun 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    if(existeVar(b.toString(),vars)){
                                                                banderaError  = true;
                                                                RESULT = "";
                                                                erroSalida.add(new ErrorSalida(bleft,bright,"La variable: "+b.toString()+" ya existe"));
                                                                error();
                                                            }else{
                                                                
                                                                    RESULT = a.toString()+" "+b.toString()+" = "+c.toString()+";\n";
                                                                    vars.add(new Variables(b.toString(),a.toString())); 

                                                                   
                                                            }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ope ::= MAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ope",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ope ::= MENOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ope",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ope ::= MULTIPLICAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ope",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ope ::= DIAGONAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ope",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operacion ::= numero ope numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a.toString()+b.toString()+c.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operacion ::= ID ope numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(existeVar(a.toString(),vars)){
                                                    RESULT = a.toString()+b.toString()+c.toString();
                                                }else{
                                                    banderaError = true;
                                                    erroSalida.add(new ErrorSalida(aleft,aright,"La variable: "+a.toString()+" no existe"));
                                                    error();
                                                    RESULT = "";
                                                    
                                                }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operacion ::= numero ope ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(existeVar(c.toString(),vars)){
                                                    RESULT = a.toString()+b.toString()+c.toString();
                                                }else{
                                                    banderaError = true;
                                                    RESULT = "";
                                                    erroSalida.add(new ErrorSalida(cleft,cright,"La variable: "+c.toString()+" no existe"));
                                                    error();
                                                }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // operacion ::= ID ope ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(existeVar(a.toString(),vars) && existeVar(c.toString(),vars)){
                                                RESULT = a.toString()+b.toString()+c.toString();
                                            }else{
                                                banderaError = true;
                                                RESULT = "";
                                                erroSalida.add(new ErrorSalida(bleft,bright,"Una de las variables no existe"));
                                                error();
                                            }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // lect ::= LEER PARENTESISABIERTO ID PARENTESISCERRADO PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(existeVar(a.toString(),vars)){
                                                                                RESULT = a.toString()+"="+"JOptionPane.showInputDialog(\"Ingresa el dato\");";
                                                                            }else{
                                                                                banderaError = true;
                                                                                RESULT = "";
                                                                                erroSalida.add(new ErrorSalida(aleft,aright,"La variable: "+a.toString()+" no existe"));
                                                                                error();
                                                                            } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lect",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // cambio ::= CAMBIO PARENTESISABIERTO ID PARENTESISCERRADO LLAVEA casos LLAVEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(existeVar(a.toString(),vars)){
                                                                                RESULT = "switch ("+a.toString()+"){\n"+b.toString()+"\n}"; System.out.println(b.toString());
                                                                            }else{
                                                                                banderaError =true;
                                                                                RESULT = "";
                                                                                erroSalida.add(new ErrorSalida(aleft,aright,"La variable: "+a.toString()+" no existe"));
                                                                                error();
                                                                            }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cambio",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // casos ::= casos CASO tipoEntrada DOSPUNTOS ciclo PARAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a.toString()+"\n case "+b.toString()+":\n"+c.toString()+"\nbreak;";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // casos ::= CASO tipoEntrada DOSPUNTOS ciclo PARAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = "case "+ a.toString()+":\n"+b.toString()+"\nbreak;\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // tipoEntrada ::= COMILLAS ID COMILLAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = "\""+a.toString()+"\""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoEntrada",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // tipoEntrada ::= numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoEntrada",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // tipoEntrada ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(existeVar(a.toString(),vars)){
                RESULT = a.toString();
                }else{
                    banderaError = true;
                    RESULT = "";
                    erroSalida.add(new ErrorSalida(aleft,aright,"La variable: "+a.toString()+" no existe"));
                    error();
                }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoEntrada",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Mientras ::= MIENTRAS PARENTESISABIERTO resultado PARENTESISCERRADO LLAVEA ciclo LLAVEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = "while ("+a.toString()+"){\n"+b.toString()+"\n}";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Mientras",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // main ::= MAIN LLAVEA ciclo LLAVEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = "public static void main (String args[]){\n"+a.toString()+"\n}";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // argumentos ::= argumentos COMA tipo ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a.toString()+","+b.toString()+" "+c.toString();
                                                if(existeVar(c.toString(),parTemp)){
                                                    banderaError = true;
                                                    erroSalida.add(new ErrorSalida(cleft,cright,"La variable: "+c.toString()+" ya existe"));
                                                    error();
                                                }
                                                else{
                                                    parTemp.add(new Variables(c.toString(),b.toString()));
                                                    vars.add(new Variables(c.toString(),b.toString()));
                                                }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // argumentos ::= tipo ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.toString()+" "+b.toString();
                                if(existeVar(b.toString(),parTemp)){
                                    banderaError = true;
                                    erroSalida.add(new ErrorSalida(bleft,bright,"La variable: "+b.toString()+" ya existe"));
                                    error();
                                }else{
                                    parTemp.add(new Variables(b.toString(),a.toString()));
                                    vars.add(new Variables(b.toString(),a.toString()));
                                }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // argumentos ::= 
            {
              Object RESULT =null;
		RESULT = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // proseso ::= PROS ID PARENTESISABIERTO argumentos PARENTESISCERRADO LLAVEA ciclo LLAVEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            if(validaFun(a.toString())){
                banderaError  = true;
                RESULT = "";
                erroSalida.add(new ErrorSalida(aleft,aright,"El procedimiento: "+a.toString()+" ya existe"));
                error();
            }
            else{
                RESULT = "public static void "+a.toString()+"("+b.toString()+"){\n"+c.toString()+"\n}";
                MetFun temp = new MetFun(false,a.toString());
                ArrayList <Variables> otro = new ArrayList<>();
                for(Variables var:parTemp){
                    otro.add(var);
                }
                temp.setVariables(otro);
                metodosYFunciones.add(temp); 
            }
            vars.clear();
            parTemp.clear();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proseso",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // funcion ::= FUN tipo ID PARENTESISABIERTO argumentos PARENTESISCERRADO LLAVEA ciclo RETORNO ID PUNTOYCOMA LLAVEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
        if(!validaFun(b.toString()) && mismoTipo(a.toString(),e.toString(),vars)){
            RESULT = "public static "+a.toString()+" "+b.toString()+"("+c.toString()+"){\n"+d.toString()+"\nreturn "+e.toString()+";\n}";
            MetFun temp = new MetFun(true,a.toString());
            temp.setTipo(a.toString());
            ArrayList <Variables> otro = new ArrayList<>();
            for(Variables var:parTemp){
                otro.add(var);
            }
            temp.setVariables(otro);
            System.out.println("Entra en el aceptar de la funcion?");
            metodosYFunciones.add(temp); 
        }
        else{
            banderaError = true;
            RESULT = "";
            erroSalida.add(new ErrorSalida(bleft,bright,"La funcion: "+b.toString()+" ya existe"));
            error();
        }
        vars.clear();
        parTemp.clear();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // retorno ::= RETORNO ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("retorno",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
