
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package com.mycompany.compiladorlenguajeespaneol.Flex_Y_Cup;

import java_cup.runtime.*;
import com.mycompany.compiladorlenguajeespaneol.Logica.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\114\000\002\002\003\000\002\002\004\000\002\002" +
    "\002\000\002\042\004\000\002\042\003\000\002\040\004" +
    "\000\002\040\003\000\002\041\003\000\002\041\003\000" +
    "\002\017\004\000\002\017\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\043\010\000" +
    "\002\044\005\000\002\044\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\004\000\002\010\004\000\002\010" +
    "\004\000\002\011\003\000\002\011\003\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\012\011\000\002\014\006\000\002\015\004\000\002" +
    "\004\005\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\007\011\000\002\007\007\000\002\016\013" +
    "\000\002\023\005\000\002\024\004\000\002\022\007\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\025\007\000\002\027\011\000\002\026\010\000\002" +
    "\026\007\000\002\030\005\000\002\030\003\000\002\030" +
    "\003\000\002\031\011\000\002\033\006\000\002\035\006" +
    "\000\002\035\004\000\002\035\002\000\002\034\012\000" +
    "\002\036\016\000\002\037\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\262\000\012\002\uffff\053\015\054\010\055\006\001" +
    "\002\000\010\053\ufff9\054\ufff9\055\ufff9\001\002\000\010" +
    "\053\ufffa\054\ufffa\055\ufffa\001\002\000\004\052\262\001" +
    "\002\000\004\002\001\001\002\000\010\006\024\007\023" +
    "\010\020\001\002\000\010\053\015\054\010\055\006\001" +
    "\002\000\004\002\ufffd\001\002\000\004\002\244\001\002" +
    "\000\010\053\ufffb\054\ufffb\055\ufffb\001\002\000\004\024" +
    "\016\001\002\000\004\011\017\001\002\000\014\006\024" +
    "\007\023\010\020\012\uffb9\014\uffb9\001\002\000\004\024" +
    "\uffd8\001\002\000\004\024\243\001\002\000\006\012\026" +
    "\014\025\001\002\000\004\024\uffd9\001\002\000\004\024" +
    "\uffda\001\002\000\010\006\024\007\023\010\020\001\002" +
    "\000\004\052\027\001\002\000\030\004\050\005\034\006" +
    "\024\007\023\010\020\024\037\030\047\032\036\046\053" +
    "\050\054\053\040\001\002\000\012\022\067\023\073\024" +
    "\230\027\233\001\002\000\010\022\067\023\073\024\210" +
    "\001\002\000\004\024\205\001\002\000\036\004\ufff0\005" +
    "\ufff0\006\ufff0\007\ufff0\010\ufff0\024\ufff0\030\ufff0\032\ufff0" +
    "\044\ufff0\046\ufff0\050\ufff0\051\ufff0\053\ufff0\056\ufff0\001" +
    "\002\000\004\011\201\001\002\000\036\004\uffee\005\uffee" +
    "\006\uffee\007\uffee\010\uffee\024\uffee\030\uffee\032\uffee\044" +
    "\uffee\046\uffee\050\uffee\051\uffee\053\uffee\056\uffee\001\002" +
    "\000\004\011\171\001\002\000\004\035\170\001\002\000" +
    "\004\024\160\001\002\000\036\004\ufff7\005\ufff7\006\ufff7" +
    "\007\ufff7\010\ufff7\024\ufff7\030\ufff7\032\ufff7\044\ufff7\046" +
    "\ufff7\050\ufff7\051\ufff7\053\ufff7\056\ufff7\001\002\000\036" +
    "\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\024\ufff6\030" +
    "\ufff6\032\ufff6\044\ufff6\046\ufff6\050\ufff6\051\ufff6\053\ufff6" +
    "\056\ufff6\001\002\000\036\004\ufff3\005\ufff3\006\ufff3\007" +
    "\ufff3\010\ufff3\024\ufff3\030\ufff3\032\ufff3\044\ufff3\046\ufff3" +
    "\050\ufff3\051\ufff3\053\ufff3\056\ufff3\001\002\000\036\004" +
    "\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\024\ufff1\030\ufff1" +
    "\032\ufff1\044\ufff1\046\ufff1\050\ufff1\051\ufff1\053\ufff1\056" +
    "\ufff1\001\002\000\036\004\ufff5\005\ufff5\006\ufff5\007\ufff5" +
    "\010\ufff5\024\ufff5\030\ufff5\032\ufff5\044\ufff5\046\ufff5\050" +
    "\ufff5\051\ufff5\053\ufff5\056\ufff5\001\002\000\036\004\uffed" +
    "\005\uffed\006\uffed\007\uffed\010\uffed\024\uffed\030\uffed\032" +
    "\uffed\044\uffed\046\uffed\050\uffed\051\uffed\053\uffed\056\uffed" +
    "\001\002\000\004\011\152\001\002\000\004\011\141\001" +
    "\002\000\036\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef" +
    "\024\uffef\030\uffef\032\uffef\044\uffef\046\uffef\050\uffef\051" +
    "\uffef\053\uffef\056\uffef\001\002\000\036\004\ufff2\005\ufff2" +
    "\006\ufff2\007\ufff2\010\ufff2\024\ufff2\030\ufff2\032\ufff2\044" +
    "\ufff2\046\ufff2\050\ufff2\051\ufff2\053\ufff2\056\ufff2\001\002" +
    "\000\004\011\114\001\002\000\004\011\066\001\002\000" +
    "\032\004\050\005\034\006\024\007\023\010\020\024\037" +
    "\030\047\032\036\046\053\050\054\051\065\053\040\001" +
    "\002\000\040\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4" +
    "\024\ufff4\030\ufff4\031\060\032\ufff4\044\ufff4\046\ufff4\050" +
    "\ufff4\051\ufff4\053\ufff4\056\ufff4\001\002\000\036\004\uffdc" +
    "\005\uffdc\006\uffdc\007\uffdc\010\uffdc\024\uffdc\030\uffdc\032" +
    "\uffdc\044\uffdc\046\uffdc\050\uffdc\051\uffdc\053\uffdc\056\uffdc" +
    "\001\002\000\004\052\061\001\002\000\030\004\050\005" +
    "\034\006\024\007\023\010\020\024\037\030\047\032\036" +
    "\046\053\050\054\053\040\001\002\000\032\004\050\005" +
    "\034\006\024\007\023\010\020\024\037\030\047\032\036" +
    "\046\053\050\054\051\063\053\040\001\002\000\036\004" +
    "\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\024\uffdd\030\uffdd" +
    "\032\uffdd\044\uffdd\046\uffdd\050\uffdd\051\uffdd\053\uffdd\056" +
    "\uffdd\001\002\000\036\004\ufff8\005\ufff8\006\ufff8\007\ufff8" +
    "\010\ufff8\024\ufff8\030\ufff8\032\ufff8\044\ufff8\046\ufff8\050" +
    "\ufff8\051\ufff8\053\ufff8\056\ufff8\001\002\000\010\053\uffb8" +
    "\054\uffb8\055\uffb8\001\002\000\010\022\067\023\073\024" +
    "\070\001\002\000\026\012\uffe4\013\uffe4\015\uffe4\016\uffe4" +
    "\017\uffe4\021\uffe4\026\uffe4\033\uffe4\034\uffe4\035\uffe4\001" +
    "\002\000\010\033\103\034\102\035\100\001\002\000\010" +
    "\033\103\034\102\035\100\001\002\000\004\012\074\001" +
    "\002\000\026\012\uffe3\013\uffe3\015\uffe3\016\uffe3\017\uffe3" +
    "\021\uffe3\026\uffe3\033\uffe3\034\uffe3\035\uffe3\001\002\000" +
    "\004\052\075\001\002\000\030\004\050\005\034\006\024" +
    "\007\023\010\020\024\037\030\047\032\036\046\053\050" +
    "\054\053\040\001\002\000\032\004\050\005\034\006\024" +
    "\007\023\010\020\024\037\030\047\032\036\046\053\050" +
    "\054\051\077\053\040\001\002\000\036\004\uffbd\005\uffbd" +
    "\006\uffbd\007\uffbd\010\uffbd\024\uffbd\030\uffbd\032\uffbd\044" +
    "\uffbd\046\uffbd\050\uffbd\051\uffbd\053\uffbd\056\uffbd\001\002" +
    "\000\004\035\110\001\002\000\010\022\067\023\073\024" +
    "\106\001\002\000\012\022\uffe8\023\uffe8\024\uffe8\035\105" +
    "\001\002\000\012\022\uffe9\023\uffe9\024\uffe9\035\104\001" +
    "\002\000\010\022\uffe6\023\uffe6\024\uffe6\001\002\000\010" +
    "\022\uffe5\023\uffe5\024\uffe5\001\002\000\004\012\uffe0\001" +
    "\002\000\004\012\uffe2\001\002\000\010\022\uffe7\023\uffe7" +
    "\024\uffe7\001\002\000\010\022\067\023\073\024\112\001" +
    "\002\000\004\012\uffdf\001\002\000\004\012\uffe1\001\002" +
    "\000\004\024\115\001\002\000\004\012\116\001\002\000" +
    "\004\052\117\001\002\000\004\045\121\001\002\000\006" +
    "\045\134\051\133\001\002\000\012\022\067\023\073\024" +
    "\122\027\125\001\002\000\004\013\uffbe\001\002\000\004" +
    "\013\uffbf\001\002\000\004\013\130\001\002\000\004\024" +
    "\126\001\002\000\004\027\127\001\002\000\004\013\uffc0" +
    "\001\002\000\030\004\050\005\034\006\024\007\023\010" +
    "\020\024\037\030\047\032\036\046\053\050\054\053\040" +
    "\001\002\000\032\004\050\005\034\006\024\007\023\010" +
    "\020\024\037\030\047\032\036\044\132\046\053\050\054" +
    "\053\040\001\002\000\006\045\uffc1\051\uffc1\001\002\000" +
    "\036\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\024\uffc3" +
    "\030\uffc3\032\uffc3\044\uffc3\046\uffc3\050\uffc3\051\uffc3\053" +
    "\uffc3\056\uffc3\001\002\000\012\022\067\023\073\024\122" +
    "\027\125\001\002\000\004\013\136\001\002\000\030\004" +
    "\050\005\034\006\024\007\023\010\020\024\037\030\047" +
    "\032\036\046\053\050\054\053\040\001\002\000\032\004" +
    "\050\005\034\006\024\007\023\010\020\024\037\030\047" +
    "\032\036\044\140\046\053\050\054\053\040\001\002\000" +
    "\006\045\uffc2\051\uffc2\001\002\000\006\024\142\027\143" +
    "\001\002\000\004\012\150\001\002\000\004\024\144\001" +
    "\002\000\004\027\145\001\002\000\004\012\146\001\002" +
    "\000\004\026\147\001\002\000\036\004\uffd7\005\uffd7\006" +
    "\uffd7\007\uffd7\010\uffd7\024\uffd7\030\uffd7\032\uffd7\044\uffd7" +
    "\046\uffd7\050\uffd7\051\uffd7\053\uffd7\056\uffd7\001\002\000" +
    "\004\026\151\001\002\000\036\004\uffd6\005\uffd6\006\uffd6" +
    "\007\uffd6\010\uffd6\024\uffd6\030\uffd6\032\uffd6\044\uffd6\046" +
    "\uffd6\050\uffd6\051\uffd6\053\uffd6\056\uffd6\001\002\000\010" +
    "\022\067\023\073\024\070\001\002\000\004\012\154\001" +
    "\002\000\004\052\155\001\002\000\030\004\050\005\034" +
    "\006\024\007\023\010\020\024\037\030\047\032\036\046" +
    "\053\050\054\053\040\001\002\000\032\004\050\005\034" +
    "\006\024\007\023\010\020\024\037\030\047\032\036\046" +
    "\053\050\054\051\157\053\040\001\002\000\040\004\uffde" +
    "\005\uffde\006\uffde\007\uffde\010\uffde\024\uffde\030\uffde\031" +
    "\uffde\032\uffde\044\uffde\046\uffde\050\uffde\051\uffde\053\uffde" +
    "\056\uffde\001\002\000\004\011\161\001\002\000\004\024" +
    "\162\001\002\000\006\012\uffea\014\uffea\001\002\000\006" +
    "\012\165\014\164\001\002\000\004\024\167\001\002\000" +
    "\004\026\166\001\002\000\036\004\uffec\005\uffec\006\uffec" +
    "\007\uffec\010\uffec\024\uffec\030\uffec\032\uffec\044\uffec\046" +
    "\uffec\050\uffec\051\uffec\053\uffec\056\uffec\001\002\000\006" +
    "\012\uffeb\014\uffeb\001\002\000\012\022\uffd3\023\uffd3\024" +
    "\uffd3\027\uffd3\001\002\000\004\022\172\001\002\000\004" +
    "\014\173\001\002\000\004\022\174\001\002\000\004\012" +
    "\175\001\002\000\004\052\176\001\002\000\030\004\050" +
    "\005\034\006\024\007\023\010\020\024\037\030\047\032" +
    "\036\046\053\050\054\053\040\001\002\000\032\004\050" +
    "\005\034\006\024\007\023\010\020\024\037\030\047\032" +
    "\036\046\053\050\054\051\200\053\040\001\002\000\036" +
    "\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\024\uffd5\030" +
    "\uffd5\032\uffd5\044\uffd5\046\uffd5\050\uffd5\051\uffd5\053\uffd5" +
    "\056\uffd5\001\002\000\004\024\202\001\002\000\004\012" +
    "\203\001\002\000\004\026\204\001\002\000\036\004\uffc4" +
    "\005\uffc4\006\uffc4\007\uffc4\010\uffc4\024\uffc4\030\uffc4\032" +
    "\uffc4\044\uffc4\046\uffc4\050\uffc4\051\uffc4\053\uffc4\056\uffc4" +
    "\001\002\000\006\026\206\035\207\001\002\000\036\004" +
    "\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb\024\uffdb\030\uffdb" +
    "\032\uffdb\044\uffdb\046\uffdb\050\uffdb\051\uffdb\053\uffdb\056" +
    "\uffdb\001\002\000\010\022\uffd4\023\uffd4\024\uffd4\001\002" +
    "\000\014\015\214\016\220\017\217\021\216\026\224\001" +
    "\002\000\014\015\214\016\220\017\217\021\216\026\215" +
    "\001\002\000\004\026\213\001\002\000\036\004\uffce\005" +
    "\uffce\006\uffce\007\uffce\010\uffce\024\uffce\030\uffce\032\uffce" +
    "\044\uffce\046\uffce\050\uffce\051\uffce\053\uffce\056\uffce\001" +
    "\002\000\010\022\uffca\023\uffca\024\uffca\001\002\000\036" +
    "\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\024\uffcf\030" +
    "\uffcf\032\uffcf\044\uffcf\046\uffcf\050\uffcf\051\uffcf\053\uffcf" +
    "\056\uffcf\001\002\000\010\022\uffcc\023\uffcc\024\uffcc\001" +
    "\002\000\010\022\uffc9\023\uffc9\024\uffc9\001\002\000\010" +
    "\022\uffcb\023\uffcb\024\uffcb\001\002\000\010\022\067\023" +
    "\073\024\222\001\002\000\004\026\uffc6\001\002\000\004" +
    "\026\uffc8\001\002\000\036\004\uffcd\005\uffcd\006\uffcd\007" +
    "\uffcd\010\uffcd\024\uffcd\030\uffcd\032\uffcd\044\uffcd\046\uffcd" +
    "\050\uffcd\051\uffcd\053\uffcd\056\uffcd\001\002\000\010\022" +
    "\067\023\073\024\226\001\002\000\004\026\uffc5\001\002" +
    "\000\004\026\uffc7\001\002\000\012\015\214\016\220\017" +
    "\217\021\216\001\002\000\014\015\214\016\220\017\217" +
    "\021\216\026\240\001\002\000\004\026\237\001\002\000" +
    "\004\024\234\001\002\000\004\027\235\001\002\000\004" +
    "\026\236\001\002\000\036\004\uffd2\005\uffd2\006\uffd2\007" +
    "\uffd2\010\uffd2\024\uffd2\030\uffd2\032\uffd2\044\uffd2\046\uffd2" +
    "\050\uffd2\051\uffd2\053\uffd2\056\uffd2\001\002\000\036\004" +
    "\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\024\uffd0\030\uffd0" +
    "\032\uffd0\044\uffd0\046\uffd0\050\uffd0\051\uffd0\053\uffd0\056" +
    "\uffd0\001\002\000\036\004\uffd1\005\uffd1\006\uffd1\007\uffd1" +
    "\010\uffd1\024\uffd1\030\uffd1\032\uffd1\044\uffd1\046\uffd1\050" +
    "\uffd1\051\uffd1\053\uffd1\056\uffd1\001\002\000\004\024\242" +
    "\001\002\000\006\012\uffbb\014\uffbb\001\002\000\006\012" +
    "\uffba\014\uffba\001\002\000\004\002\000\001\002\000\004" +
    "\002\ufffe\001\002\000\010\053\ufffc\054\ufffc\055\ufffc\001" +
    "\002\000\004\024\250\001\002\000\004\011\251\001\002" +
    "\000\014\006\024\007\023\010\020\012\uffb9\014\uffb9\001" +
    "\002\000\006\012\253\014\025\001\002\000\004\052\254" +
    "\001\002\000\030\004\050\005\034\006\024\007\023\010" +
    "\020\024\037\030\047\032\036\046\053\050\054\053\040" +
    "\001\002\000\032\004\050\005\034\006\024\007\023\010" +
    "\020\024\037\030\047\032\036\046\053\050\054\053\040" +
    "\056\256\001\002\000\004\024\257\001\002\000\004\026" +
    "\260\001\002\000\004\051\261\001\002\000\010\053\uffb7" +
    "\054\uffb7\055\uffb7\001\002\000\030\004\050\005\034\006" +
    "\024\007\023\010\020\024\037\030\047\032\036\046\053" +
    "\050\054\053\040\001\002\000\032\004\050\005\034\006" +
    "\024\007\023\010\020\024\037\030\047\032\036\046\053" +
    "\050\054\051\264\053\040\001\002\000\004\002\uffbc\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\262\000\020\002\012\033\011\034\003\036\004\040" +
    "\010\041\013\042\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\246\001\001\000\012\033\244\034\003\036\004\041\245" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\020" +
    "\035\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\240\001\001\000\002\001\001\000\040\003\040\004" +
    "\041\006\031\007\044\012\055\015\042\016\051\017\054" +
    "\022\043\023\030\024\027\025\032\027\050\031\034\043" +
    "\045\001\001\000\006\011\230\021\231\001\001\000\006" +
    "\011\210\021\211\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\063\004\041\006\031\007" +
    "\044\012\055\015\042\016\051\022\043\023\030\024\027" +
    "\025\032\027\050\031\034\043\045\001\001\000\004\014" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\003\040\004\041\006\031\007\044\012\055\015\042\016" +
    "\051\017\061\022\043\023\030\024\027\025\032\027\050" +
    "\031\034\043\045\001\001\000\036\003\063\004\041\006" +
    "\031\007\044\012\055\015\042\016\051\022\043\023\030" +
    "\024\027\025\032\027\050\031\034\043\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\070\013\071\001\001\000\002\001\001\000\004\010" +
    "\110\001\001\000\004\010\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\003\040\004" +
    "\041\006\031\007\044\012\055\015\042\016\051\017\075" +
    "\022\043\023\030\024\027\025\032\027\050\031\034\043" +
    "\045\001\001\000\036\003\063\004\041\006\031\007\044" +
    "\012\055\015\042\016\051\022\043\023\030\024\027\025" +
    "\032\027\050\031\034\043\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\117\001\001\000\002\001\001\000\006\011\122" +
    "\030\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\003\040\004\041\006\031\007\044\012" +
    "\055\015\042\016\051\017\130\022\043\023\030\024\027" +
    "\025\032\027\050\031\034\043\045\001\001\000\036\003" +
    "\063\004\041\006\031\007\044\012\055\015\042\016\051" +
    "\022\043\023\030\024\027\025\032\027\050\031\034\043" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\122\030\134\001\001\000\002\001\001\000\040\003" +
    "\040\004\041\006\031\007\044\012\055\015\042\016\051" +
    "\017\136\022\043\023\030\024\027\025\032\027\050\031" +
    "\034\043\045\001\001\000\036\003\063\004\041\006\031" +
    "\007\044\012\055\015\042\016\051\022\043\023\030\024" +
    "\027\025\032\027\050\031\034\043\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\070\013\152\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\003\040\004\041\006\031\007\044\012" +
    "\055\015\042\016\051\017\155\022\043\023\030\024\027" +
    "\025\032\027\050\031\034\043\045\001\001\000\036\003" +
    "\063\004\041\006\031\007\044\012\055\015\042\016\051" +
    "\022\043\023\030\024\027\025\032\027\050\031\034\043" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\044\162\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\003\040\004\041\006\031\007\044\012\055\015" +
    "\042\016\051\017\176\022\043\023\030\024\027\025\032" +
    "\027\050\031\034\043\045\001\001\000\036\003\063\004" +
    "\041\006\031\007\044\012\055\015\042\016\051\022\043" +
    "\023\030\024\027\025\032\027\050\031\034\043\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\224\001\001" +
    "\000\004\020\220\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\222\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\226\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\224\001\001\000\004\020\220\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\020\035" +
    "\251\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\003\040\004\041\006\031\007\044\012\055\015\042\016" +
    "\051\017\254\022\043\023\030\024\027\025\032\027\050" +
    "\031\034\043\045\001\001\000\036\003\063\004\041\006" +
    "\031\007\044\012\055\015\042\016\051\022\043\023\030" +
    "\024\027\025\032\027\050\031\034\043\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\003\040\004\041\006\031\007\044\012" +
    "\055\015\042\016\051\017\262\022\043\023\030\024\027" +
    "\025\032\027\050\031\034\043\045\001\001\000\036\003" +
    "\063\004\041\006\031\007\044\012\055\015\042\016\051" +
    "\022\043\023\030\024\027\025\032\027\050\031\034\043" +
    "\045\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        ArrayList<Variables> vars = new ArrayList<>();
        ArrayList  <String> salidas = new ArrayList<>();
        public ArrayList<ErrorSalida> erroSalida = new ArrayList<>();
        private ArrayList<MetFun> metodosYFunciones = new ArrayList<>();
        private ArrayList<Variables> parTemp = new ArrayList<>();
        boolean banderaInt = false;
        boolean banderaFloat = false;
        boolean banderaString = false;
        boolean banderaError = false;

        public  boolean getError(){
            return banderaError;
        }
        public void imprimir(){
                for (String salida : salidas) {
                        System.out.println(salida);
                }
        }
public boolean validaFun(String nombre){
    boolean bandera = false;
    for(MetFun s: metodosYFunciones){
        if(s.getNombre().equals(nombre)){
            bandera = true;
            break;
        }
    }
    return bandera;
}
public boolean existeVar(String var,ArrayList <Variables> vars1) {
        boolean bandera = false;
        for (Variables var1 : vars1) {
            if (var.equals(var1.getNombre())) {
                bandera = true;
                break;
            }
        }
        return bandera;
    }
public boolean valTipo(String id,String tipo){
        boolean band = false;
        for(Variables var: vars){
            if(var.getNombre().equals(id)){
                if(var.getTipo().equals("flotante")){
                     if(tipo.equals("Entero")){
                    band = true;
                    break;
                }
                }
                else{
                    
                     if(var.getTipo().equals(tipo)){
                    band = true;
                    break;
                }
               
            }

        }
        

    }
    return band;
    }

    public boolean mismoTipo(String var1, String dato) {
        boolean si = false;
        for (Variables var : vars) {
            if (var.getNombre().equals(var1)) {
                switch (var.getTipo()) {
                    case "String":
                            try {
                        String algo = dato.toString();
                        si = true;
                    } catch (Exception e) {
                    }
                    break;
                    case "int":
                                                        try {
                        int algo = Integer.parseInt(dato);
                        si = true;
                    } catch (Exception e) {
                    }
                    break;
                    case "float":
                                                            try {
                        float algo = Float.parseFloat(dato);
                        si = true;
                    } catch (Exception e) {
                    }
                    break;
                    default:
                        throw new AssertionError();
                }
            }

        }
        return si;
    }
        public String type(String entrada) {
        String salida = "Object";
        switch (entrada) {
            case "Texto":
                salida = "String";
                break;
            case "Entero":
                salida = "int";
                break;
            case "flotante":
                salida = "double";
                break;

            default:
                break;
        }
        return salida;
    }
    public ArrayList<String> getSalidas() {
        return salidas;
    }

    public void setSalidas(ArrayList<String> salidas) {
        this.salidas = salidas;
    }
        public String crearFor(String priemro,String segundo){
        String salida = "";
        try {
            int uno = Integer.parseInt(priemro);
            int dos = Integer.parseInt(segundo);
            if(uno != dos){
                if(uno < dos){
                    salida = "for(int i = "+uno+"; "+"i"+"<"+dos+"; i++){\n";
                }
                else{
                    salida = "for(int i = "+uno+"; "+"i"+">"+dos+"; i--){\n";
                }
            }
        } catch (Exception e) {
        }
        System.out.println(salida);
        return salida;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= todo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		salidas.add(a.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // todo ::= eleccion main 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = b.toString()+"\n"+a.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("todo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // todo ::= main 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("todo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // eleccion ::= eleccion tipoFP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a.toString()+"\n"+b.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("eleccion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // eleccion ::= tipoFP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a.toString()+"\n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("eleccion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tipoFP ::= funcion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoFP",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipoFP ::= proseso 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoFP",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ciclo ::= ciclo op 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a.toString()+"\n"+b.toString();/*if(b.toString() != ""){
                                salidas.add(b.toString());}*/
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ciclo ::= op 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = b.toString()+"\n";/*if(b.toString() != ""){
                                salidas.add(b.toString());}*/
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // op ::= declaracion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // op ::= escribir 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // op ::= si 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // op ::= sinosi 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // op ::= for 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // op ::= asig 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // op ::= lect 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // op ::= cambio 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // op ::= Mientras 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // op ::= llamaPros 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // llamaPros ::= PROS ID PARENTESISABIERTO parametros PARENTESISCERRADO PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = a.toString()+" ("+b.toString()+");";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamaPros",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // parametros ::= parametros COMA ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(existeVar(b.toString(),vars)){
                                            RESULT = a.toString()+","+b.toString();
                                        }else{
                                            RESULT = "";
                                            banderaError = true;
                                        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // parametros ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(existeVar(a.toString(),vars)){
                            RESULT = a.toString();
                        }else{
                            RESULT = "";
                            banderaError = true;
                        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // condicion ::= MAYOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // condicion ::= MENOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // condicion ::= IGUAL IGUAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = "==";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // condicion ::= MAYOR IGUAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ">=";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // condicion ::= MENOR IGUAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "<=";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // numero ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numero",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // numero ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numero",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // resultado ::= numero condicion numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a.toString()+b.toString()+c.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("resultado",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // resultado ::= ID condicion numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    if(existeVar(a.toString(),vars)){
                                                                RESULT = a.toString()+b.toString()+c.toString();}
                                                            else{
                                                                RESULT = "";
                                                                banderaError = true;
                                                            }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("resultado",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // resultado ::= numero condicion ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    if(existeVar(c.toString(),vars)){
                                                                RESULT = a.toString()+b.toString()+c.toString();}
                                                            else{
                                                                RESULT = "";
                                                                banderaError = true;
                                                            }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("resultado",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // resultado ::= ID condicion ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    if(existeVar(a.toString(),vars) && existeVar(c.toString(),vars)){
                                                                RESULT = a.toString()+b.toString()+c.toString();}
                                                            else{
                                                                RESULT = "";
                                                                banderaError = true;
                                                            }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("resultado",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // si ::= SI PARENTESISABIERTO resultado PARENTESISCERRADO LLAVEA ciclo LLAVEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = "if ("+a.toString()+"){\n"+b.toString()+"\n}";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("si",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sino ::= SINO LLAVEA ciclo LLAVEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = "else {\n"+a.toString()+"\n}";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sino",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sinosi ::= si sino 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a.toString()+b.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sinosi",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declaracion ::= tipo ID PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		       
                                                if(existeVar(b.toString(),vars)){
                                                        banderaError = true;
                                                        RESULT = "";
                                                }
                                                else{
                                                vars.add(new Variables(b.toString(),a.toString()));
                                                RESULT = a.toString()+" "+b.toString()+";";}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tipo ::= ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = type(a.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tipo ::= FLOTANTE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = type(a.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tipo ::= STRING 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = type(a.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // escribir ::= ESCRIBIR PARENTESISABIERTO COMILLAS ID COMILLAS PARENTESISCERRADO PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = "System.out.println("+"\""+a.toString()+"\""+");";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribir",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // escribir ::= ESCRIBIR PARENTESISABIERTO ID PARENTESISCERRADO PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		    if(existeVar(a.toString(),vars)){
                                                                                        RESULT = "System.out.println("+a.toString()+");";
                                                                                    }else{
                                                                                        RESULT = "";
                                                                                        banderaError = true;
                                                                                    }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribir",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // for ::= PARA PARENTESISABIERTO NUMERO COMA NUMERO PARENTESISCERRADO LLAVEA ciclo LLAVEC 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = crearFor(num1.toString(),num2.toString())+a.toString()+"\n}";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // asig1 ::= tipo ID IGUAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(existeVar(b.toString(),vars)){
                                                        banderaError = true;
                                                        RESULT = "";
                                                }
                                                else{
                                                vars.add(new Variables(b.toString(),a.toString()));
                                                RESULT = a.toString()+" "+b.toString()+"";}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // asig2 ::= ID IGUAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // asig ::= asig2 COMILLAS ID COMILLAS PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		    if(existeVar(a.toString(),vars)){
                                                                    RESULT = a.toString()+" = "+"\""+b.toString()+"\""+";\n";}
                                                                else{
                                                                    RESULT = "";
                                                                    banderaError = true;
                                                                    erroSalida.add(new ErrorSalida(bleft,bright,"La variable: "+a.toString()+" no existe"));
                                                                }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // asig ::= asig2 numero PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a.toString()+" = "+b.toString()+";\n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // asig ::= asig2 operacion PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a.toString()+" = "+b.toString()+";\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // asig ::= asig1 numero PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a.toString()+" = "+b.toString()+";\n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // asig ::= asig1 operacion PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a.toString()+" = "+b.toString()+";\n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // asig ::= asig1 ID PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a.toString()+" = "+b.toString()+";\n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ope ::= MAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ope",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ope ::= MENOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ope",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ope ::= MULTIPLICAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ope",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ope ::= DIAGONAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ope",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operacion ::= numero ope numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a.toString()+b.toString()+c.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operacion ::= ID ope numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(existeVar(a.toString(),vars)){
                                                    RESULT = a.toString()+b.toString()+c.toString();
                                                }else{
                                                    banderaError = true;
                                                    erroSalida.add(new ErrorSalida(aleft,aright,"La variable: "+a.toString()+" no existe"));
                                                    RESULT = "";
                                                }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operacion ::= numero ope ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(existeVar(c.toString(),vars)){
                                                    RESULT = a.toString()+b.toString()+c.toString();
                                                }else{
                                                    banderaError = true;
                                                    erroSalida.add(new ErrorSalida(cleft,cright,"La variable: "+c.toString()+" no existe"));
                                                    RESULT = "";
                                                }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operacion ::= ID ope ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(existeVar(a.toString(),vars) && existeVar(c.toString(),vars)){
                                                RESULT = a.toString()+b.toString()+c.toString();
                                            }else{
                                                banderaError = true;
                                                erroSalida.add(new ErrorSalida(cleft,cright,"Alguna de las variables no existe"));
                                                RESULT = "";
                                            }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // lect ::= LEER PARENTESISABIERTO ID PARENTESISCERRADO PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(existeVar(a.toString(),vars)){
                                                                                RESULT = a.toString()+"="+"JOptionPane.showInputDialog(\"Ingresa el dato\");";
                                                                            }else{
                                                                                banderaError = true;
                                                                                RESULT = "";
                                                                            } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lect",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // cambio ::= CAMBIO PARENTESISABIERTO ID PARENTESISCERRADO LLAVEA casos LLAVEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(existeVar(a.toString(),vars)){
                                                                                RESULT = "switch ("+a.toString()+"){\n"+b.toString()+"\n}"; System.out.println(b.toString());
                                                                            }else{
                                                                                banderaError =true;
                                                                                RESULT = "";
                                                                            }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cambio",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // casos ::= casos CASO tipoEntrada DOSPUNTOS ciclo PARAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a.toString()+"\n case "+b.toString()+":\n"+c.toString()+"\nbreak;";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // casos ::= CASO tipoEntrada DOSPUNTOS ciclo PARAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = "case "+ a.toString()+":\n"+b.toString()+"\nbreak;\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // tipoEntrada ::= COMILLAS ID COMILLAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = "\""+a.toString()+"\""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoEntrada",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // tipoEntrada ::= numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoEntrada",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // tipoEntrada ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(existeVar(a.toString(),vars)){
                RESULT = a.toString();
                }else{
                    banderaError = true;
                    RESULT = "";
                }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoEntrada",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Mientras ::= MIENTRAS PARENTESISABIERTO resultado PARENTESISCERRADO LLAVEA ciclo LLAVEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = "while ("+a.toString()+"){\n"+b.toString()+"\n}";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Mientras",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // main ::= MAIN LLAVEA ciclo LLAVEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = "public static void main (String args[]){\n"+a.toString()+"\n}";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // argumentos ::= argumentos COMA tipo ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a.toString()+","+b.toString()+" "+c.toString();
                                                if(existeVar(c.toString(),parTemp)){
                                                    banderaError = true;
                                                    
                                                }
                                                else{
                                                    parTemp.add(new Variables(c.toString(),b.toString()));
                                                    vars.add(new Variables(c.toString(),b.toString()));
                                                }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // argumentos ::= tipo ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.toString()+" "+b.toString();
                                if(existeVar(b.toString(),parTemp)){
                                    banderaError = true;
                                    
                                }else{
                                    parTemp.add(new Variables(b.toString(),a.toString()));
                                    vars.add(new Variables(b.toString(),a.toString()));
                                }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // argumentos ::= 
            {
              Object RESULT =null;
		RESULT = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // proseso ::= PROS ID PARENTESISABIERTO argumentos PARENTESISCERRADO LLAVEA ciclo LLAVEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            if(validaFun(a.toString())){
                banderaError  = true;
                RESULT = "";
            }
            else{
                RESULT = "public static void "+a.toString()+"("+b.toString()+"){\n"+c.toString()+"\n}";
                metodosYFunciones.add(new MetFun(false,a.toString())); 
            }
            vars.clear();
            parTemp.clear();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proseso",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // funcion ::= FUN tipo ID PARENTESISABIERTO argumentos PARENTESISCERRADO LLAVEA ciclo RETORNO ID PUNTOYCOMA LLAVEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = "public static "+a.toString()+" "+b.toString()+"("+c.toString()+"){\n"+d.toString()+"\nreturn "+e.toString()+";\n}";vars.clear();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // retorno ::= RETORNO ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("retorno",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
